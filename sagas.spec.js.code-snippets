{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Sagas spec": {
		"scope": "javascript,typescript",
		"prefix": "specsagas",
		"body": [
			"import { put, takeLatest, call } from 'redux-saga/effects';",
			"import request from 'utils/request';",
			"import * as actionType from './actionTypes';",
			"import { sagasWorker, sagasWatcher } from './sagas';",
			"",
			"describe('sagasWorker()', () => {",
			"  const generator = sagasWorker();",
			"  const data = { token: 'testing' };",
			"  const error = { message: 'error' };",
			"",
			"  it('should return call to someUrl', () => {",
			"    expect(generator.next().value).toEqual(call(request.get, 'someUrl'));",
			"  });",
			"",
			"  it('should dispatch _SUCCESS action', () => {",
			"    expect(generator.next({ data }).value).toEqual(",
			"      put({ type: actionType._SUCCESS, payload: data }),",
			"    );",
			"  });",
			"",
			"  it('should dispatch _FAILED action', () => {",
			"    expect(generator.throw(error).value).toEqual(",
			"      put({ type: actionType._FAILED, payload: error.message }),",
			"    );",
			"  });",
			"});",
			"",
			"describe('sagasWatcher()', () => {",
			"  const generator = sagasWatcher();",
			"  it('should dispatch _START action', () => {",
			"    expect(generator.next().value).toEqual(takeLatest(actionType._START, sagasWorker));",
			"  });",
			"});",
			""
		],
		"description": "spec for sagas"
	}
}