{
  "React Native Func Comp": {
    "scope": "javascript,typescript",
    "prefix": "rfen",
    "body": [
      "import React from 'react';",
      "import { View, Text, StyleSheet} from 'react-native';",
      "",
      "const ${1:componentName} = props => {",
      "  return (",
      "    <View style={styles.screen}>",
      "      <Text>$0</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  screen: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "    alignItems: 'center'",
      "  }",
      "});",
      "",
      "export default ${1:componentName};",
      ""
    ],
    "description": "React Native Func Comp"
  },
  "Redux Action": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "action",
    "body": [
      "import * as actionTypes from './actionTypes';",
      "",
      "export function postSomething(formData) {",
      "  return {",
      "    type: actionTypes.POST_SOMETHING,",
      "    payload: formData,",
      "  };",
      "}",
      "",
      "export function getSomething() {",
      "  return {",
      "    type: actionTypes.GET_SOMETHING,",
      "  };",
      "}",
      ""
    ],
    "description": "Redux Action"
  },
  "Redux Action Spec": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "actionspec",
    "body": [
      "import * as actions from './actions';",
      "",
      "describe('Some Action', () => {",
      "  it('should return POST_SOMETHING and payload', () => {",
      "    expect(actions.postSomething({})).toMatchSnapshot();",
      "  });",
      "  it('should return GET_SOMETHING and payload', () => {",
      "    expect(actions.getSomething()).toMatchSnapshot();",
      "  });",
      "});"
    ],
    "description": "Redux Action Spec"
  },
  "React Component Spec": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "compspec",
    "body": [
      "import React from 'react';",
      "import { Component } from './index';",
      "",
      "const tagsArray = [];",
      "const defaultProps = {",
      "  key1: jest.fn(),",
      "  key2: [],",
      "};",
      "describe('rendering', () => {",
      "  const wrapper = shallow(<Component {...defaultProps} />);",
      "  it('should render component', () => {",
      "    expect(wrapper).toMatchSnapshot();",
      "  });",
      "",
      "  it('should have a button', () => {",
      "    expect(wrapper.find('Button')).toHaveLength(1);",
      "  });",
      "});",
      "",
      "describe('behavior', () => {",
      "  const wrapper = shallow(<Component {...defaultProps} someAction={someAction} />);",
      "  it('should trigger a function on componentWillMount()', () => {",
      "    const someAction = jest.fn();",
      "    expect(wrapper).toBeDefined();",
      "    expect(someAction).toBeCalled();",
      "  });",
      "",
      "  it('should call a function (on component instance)', () => {",
      "    const someAction = jest.fn();",
      "    wrapper.setProps({ someAction });",
      "    //wrapper.instance().someHandle();",
      "    wrapper.find('someElement').simulate('submit');",
      "    expect(someAction).toHaveBeenCalled();",
      "  });",
      "});",
      ""
    ],
    "description": "React Component Spec"
  },
  "Redux Reducer": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reducer",
    "body": [
      "import * as actionTypes from './actionTypes';",
      "",
      "export const initialState = {",
      "  something: [],",
      "  error: {},",
      "  loading: false,",
      "  page: 1,",
      "  pageInfo: {",
      "    lastPage: 0,",
      "    total: 0,",
      "    perPage: 0,",
      "  },",
      "};",
      "",
      "export default function (state = initialState, { type, payload }) {",
      "  switch (type) {",
      "    case actionTypes.GET_SOMETHING:",
      "      return { ...state, loading: true };",
      "    case actionTypes.GET_SOMETHING_SUCCESS: {",
      "      const { page, data: something, ...pageInfo } = payload;",
      "      return {",
      "        ...state,",
      "        loading: false,",
      "        error: {},",
      "        something,",
      "        page,",
      "        pageInfo,",
      "      };",
      "    }",
      "    case actionTypes.GET_SOMETHING_FAILED:",
      "      return { ...state, loading: false, error: payload };",
      "    case actionTypes.POST_SOMETHING:",
      "      return { ...state, loading: true, error: {} };",
      "    case actionTypes.POST_SOMETHING_SUCCESS:",
      "      return { ...state, loading: false, error: {} };",
      "    case actionTypes.POST_SOMETHING_FAILED:",
      "      return { ...state, loading: false, error: payload };",
      "    default:",
      "      return state;",
      "  }",
      "}",
      ""
    ],
    "description": "Redux Reducer"
  },
  "Redux Reducer Spec": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "reducerspec",
    "body": [
      "import reducer, { initialState } from './reducer';",
      "import * as actionTypes from './actionTypes';",
      "",
      "const getResponse = {",
      "  page: 1,",
      "  data: [],",
      "  lastPage: 0,",
      "  total: 0,",
      "  perPage: 0,",
      "};",
      "",
      "describe('SOME reducer', () => {",
      "  let stateAfter;",
      "  it('should return the initial state', () => {",
      "    stateAfter = reducer(undefined, {});",
      "    expect(stateAfter).toEqual(initialState);",
      "  });",
      "",
      "  it(`should return the state after ${actionTypes.GET_SOMETHING}`, () => {",
      "    stateAfter = reducer(stateAfter, { type: actionTypes.GET_SOMETHING });",
      "    expect(stateAfter).toEqual({",
      "      ...initialState,",
      "      loading: true,",
      "    });",
      "  });",
      "",
      "  it(`should return the state after ${actionTypes.GET_SOMETHING_SUCCESS}`, () => {",
      "    const { page, data: exercises, ...pageInfo } = getResponse;",
      "    const action = { type: actionTypes.GET_SOMETHING_SUCCESS, payload: getResponse }",
      "    stateAfter = reducer(stateAfter, action);",
      "    expect(stateAfter).toEqual({",
      "      ...initialState,",
      "      loading: false,",
      "      error: {},",
      "      exercises,",
      "      page,",
      "      pageInfo,",
      "    });",
      "  });",
      "});",
      ""
    ],
    "description": "Redux Reducer Spec"
  },
  "Sagas Spec": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "sagasspec",
    "body": [
      "import { put, takeLatest, call } from 'redux-saga/effects';",
      "import request from 'utils/request';",
      "import * as actionTypes from './actionTypes';",
      "import { sagasWorker, sagasWatcher } from './sagas';",
      "",
      "describe('sagasWorker()', () => {",
      "  const generator = sagasWorker();",
      "  const data = { token: 'testing' };",
      "  const error = { message: 'error' };",
      "",
      "  it('should return call to someUrl', () => {",
      "    expect(generator.next().value).toEqual(call(request.get, 'someUrl'));",
      "  });",
      "",
      "  it('should dispatch GET_SOMETHING_SUCCESS action', () => {",
      "    expect(generator.next({ data }).value).toEqual(",
      "      put({ type: actionTypes.GET_SOMETHING_SUCCESS, payload: data }),",
      "    );",
      "  });",
      "",
      "  it('should dispatch GET_SOMETHING_FAILED action', () => {",
      "    expect(generator.throw(error).value).toEqual(",
      "      put({ type: actionTypes.GET_SOMETHING_FAILED, payload: error.message }),",
      "    );",
      "  });",
      "});",
      "",
      "describe('sagasWatcher()', () => {",
      "  const generator = sagasWatcher();",
      "  it('should dispatch GET_SOMETHING_START action', () => {",
      "    expect(generator.next().value).toEqual(takeLatest(actionTypes.GET_SOMETHING_START, sagasWorker));",
      "  });",
      "});",
      ""
    ],
    "description": "Sagas Spec"
  }
}
