{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"reducer spec": {
		"scope": "javascript,typescript",
		"prefix": "specreducer",
		"body": [
			"import reducer, { initialState } from './reducer';",
			"import * as actionTypes from './actionTypes';",
			"",
			"const getResponse = {",
			"  page: 1,",
			"  data: [],",
			"  lastPage: 0,",
			"  total: 0,",
			"  perPage: 0,",
			"};",
			"",
			"describe('SOME reducer', () => {",
			"  let stateAfter;",
			"  it('should return the initial state', () => {",
			"    stateAfter = reducer(undefined, {});",
			"    expect(stateAfter).toEqual(initialState);",
			"  });",
			"",
			"  it(`should return the state after ${actionTypes.GET_SOMETHING}`, () => {",
			"    stateAfter = reducer(stateAfter, { type: actionTypes.GET_SOMETHING });",
			"    expect(stateAfter).toEqual({",
			"      ...initialState,",
			"      loading: true,",
			"    });",
			"  });",
			"",
			"  it(`should return the state after ${actionTypes.GET_SOMETHING_SUCCESS}`, () => {",
			"    const { page, data: exercises, ...pageInfo } = getResponse;",
			"    const action = { type: actionTypes.GET_SOMETHING_SUCCESS, payload: getResponse }",
			"    stateAfter = reducer(stateAfter, action);",
			"    expect(stateAfter).toEqual({",
			"      ...initialState,",
			"      loading: false,",
			"      error: {},",
			"      exercises,",
			"      page,",
			"      pageInfo,",
			"    });",
			"  });",
			"});",
			"",
		],
		"description": "reducer spec"
	}
}