{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "javascript,typescript",
		"prefix": "specindex",
		"body": [
			"import React from 'react';",
			"import { Component } from './index';",
			"",
			"const tagsArray = [];",
			"const defaultProps = {",
			"  key1: jest.fn(),",
			"  key2: [],",
			"};",
			"describe('rendering', () => {",
			"  const wrapper = shallow(<Component {...defaultProps} />);",
			"  it('should render component', () => {",
			"    expect(wrapper).toMatchSnapshot();",
			"  });",
			"",
			"  it('should have a button', () => {",
			"    expect(wrapper.find('Button')).toHaveLength(1);",
			"  });",
			"});",
			"",
			"describe('behavior', () => {",
			"  const wrapper = shallow(<Component {...defaultProps} someAction={someAction} />);",
			"  it('should trigger a function on componentWillMount()', () => {",
			"    const someAction = jest.fn();",
			"    expect(wrapper).toBeDefined();",
			"    expect(someAction).toBeCalled();",
			"  });",
			"",
			"  it('should call a function (on component instance)', () => {",
			"    const someAction = jest.fn();",
			"    wrapper.setProps({ someAction });",
			"    //wrapper.instance().someHandle();",
			"    wrapper.find('someElement').simulate('submit');",
			"    expect(someAction).toHaveBeenCalled();",
			"  });",
			"});",
			"",
		],
		"description": "index spec"
	}
}